<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FirstPersonHuntTheWumpus</name>
    </assembly>
    <members>
        <member name="F:FirstPersonWumpus.UI.AboutBoxForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:FirstPersonWumpus.UI.AboutBoxForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:FirstPersonWumpus.UI.AboutBoxForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:FirstPersonWumpus.UI.Camera.Warp(Microsoft.Xna.Framework.Vector3,System.Int32)">
            <summary>
            Move the camera to a distant location without causing graphical flicker
            </summary>
            <param name="destination">The coordinate to move the camera to at the beginning of the next update</param>
            <param name="priority">Warp destinations with higher priority will overwrite destinations with lower priority</param>
        </member>
        <member name="M:FirstPersonWumpus.UI.Camera.Warp(Microsoft.Xna.Framework.Vector2,System.Int32)">
            <summary>
            Move the camera to a distant location without causing graphical flicker
            </summary>
            <param name="destination">The coordinate to move the camera to at the beginning of the next update</param>
            <param name="priority">Warp destinations with higher priority will overwrite destinations with lower priority</param>
        </member>
        <member name="T:FirstPersonWumpus.UI.EffectResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:FirstPersonWumpus.UI.EffectResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:FirstPersonWumpus.UI.EffectResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:FirstPersonWumpus.UI.EffectResource.HtWEffectCode">
             <summary>
               Looks up a localized string similar to float4x4 World;
            float4x4 View;
            float4x4 Projection;
            float4x4 WorldInverseTranspose;
            
            float3 FlashlightPosition;
            float3 FlashlightVector;
            float3 FlashlightColor = float3(1, 1, 1);
             
            float Shininess = 200;
            float4 SpecularColor = float4(1, 1, 1, 1);
            float SpecularIntensity = 1;
            float3 ViewVector = float3(1, 0, 0);
            float3 ViewPosition;
            
            float Brightness = 0.8f;
            
            float Alpha = 1.0f;
            
            float Cycle = 0;
            
            float Animation = 0;
            float Wave = 0;
            float WaveHeight = 0.11f;
            float WaveLength = 0.8f;
             [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="F:FirstPersonWumpus.UI.Launcher.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:FirstPersonWumpus.UI.Launcher.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:FirstPersonWumpus.UI.Launcher.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:FirstPersonWumpus.UI.SettingsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:FirstPersonWumpus.UI.SettingsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:FirstPersonWumpus.UI.SettingsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:FirstPersonWumpus.UI.UIControllerInterface">
            <summary>
            The game control should implement this interface and implement all methods.
            This interface contains all the methods that the UI needs to interact with the game control.
            Be sure to make all methods and properties public
            </summary>
        </member>
        <member name="M:FirstPersonWumpus.UI.UIControllerInterface.Initialize(System.String,System.Int32)">
            <summary>
            Called when a new game starts
            * Load/prepare the cave, map, hazards, trivia, and all variables/stats for a new game session
            </summary>
            <param name="playername">The player's name</param>
            <param name="caveLayout">The cave layout to load</param>
        </member>
        <member name="M:FirstPersonWumpus.UI.UIControllerInterface.Turn(System.Int32)">
            <summary>
            Called when the player changes rooms (player takes a "turn").
            * Add 1 to the turn count and increase the player's gold by 1.
            </summary>
            <param name="roomI">The number of the roomI the player moved into. (Room number is 1-30)</param>
        </member>
        <member name="M:FirstPersonWumpus.UI.UIControllerInterface.Shoot(System.Int32)">
            <summary>
            Called when the player shoots an arrow. 
            * Decrease arrow count by 1
            * Move the wumpus if the arrow misses
            </summary>
            <param name="targetRoom">The number of the roomI the player is shooting into. (Room number is 1-30)</param>
            <returns>Returns true if the wumpus is in targetRoom, otherwise returns false.</returns>
        </member>
        <member name="M:FirstPersonWumpus.UI.UIControllerInterface.AdjacentRooms(System.Int32)">
            <summary>
            Gets the numbers of the rooms that are touching 'roomI'.
            </summary>
            <param name="roomI">The number of the roomI to get the set of adjacent rooms for. (Room number is 1-30)</param>
            <returns>
            An array of 6 integers containing the numbers of the rooms adjacent to 'roomI'.
            The array should be in clockwise order, with the roomI to the north of 'roomI' at index 0, and the roomI to the northwest at index 5.
            Ex: For roomI 15 this method returns {9,10,16,21,14,8}
            </returns>
        </member>
        <member name="M:FirstPersonWumpus.UI.UIControllerInterface.GetTriviaQuestion">
            <summary>
            Gets a trivia question and answers
            * Store the correct answer so it can be compared when the question is answered
            </summary>
            <returns>
            An array of strings containing the question text and each of the answer choices.
            Ex: {"Question text", "Answer choice A", "Answer choice B", "Answer choice C", "Answer choice D"}
            </returns>
        </member>
        <member name="M:FirstPersonWumpus.UI.UIControllerInterface.AnswerTrivia(System.Int32)">
            <summary>
            Evaluates the player's answer to the current trivia question.
            * Increase the number of correctly answered trivia questions if the player's answer is correct.
            * Increase the number of incorrectly answered trivia questions if the player's answer is incorrect.
            * Remove 1 gold
            * If the player does not have any gold, always count the answer as incorrect
            </summary>
            <param name="answerChoice">The answer choice selected by the player</param>
            <returns>False if the player has no gold or answered incorrecly. True if the player answered correctly.</returns>
        </member>
        <member name="M:FirstPersonWumpus.UI.UIControllerInterface.BeginTrivia(System.Int32)">
            <summary>
            Starts a new trivia session
            * Reset the number of correct/incorrectly answered questions to 0
            * Set the number of questions that will be asked in this session to the input value
            </summary>
            <param name="questions">The number of questions that will be asked in the trivia session</param>
        </member>
        <member name="M:FirstPersonWumpus.UI.UIControllerInterface.EncounterBats(System.Int32)">
            <summary>
            Called when the player enter a roomI that contains bats
            * Move the player to a random roomI.
            * Move the bats that are in 'roomI' to a random roomI
            </summary>
            <returns>The number of the random roomI that the player is moved to.</returns>
        </member>
        <member name="M:FirstPersonWumpus.UI.UIControllerInterface.EscapePit">
            <summary>
            Called after the player wins a trivia session to escape a pit
            * Move the player to the starting roomI
            </summary>
            <returns>The number the roomI the player is moved to after escaping a pit.</returns>
        </member>
        <member name="M:FirstPersonWumpus.UI.UIControllerInterface.BeatWumpus">
            <summary>
            Called when the player wins a trivia session for fighting the wumpus
            * Move the wumpus after beating it in a fight
            </summary>
        </member>
        <member name="M:FirstPersonWumpus.UI.UIControllerInterface.WumpusHere(System.Int32)">
            <summary>
            Checks if the wumpus is in 'roomI'
            </summary>
            <param name="roomI">The roomI to check for a wumpus</param>
            <returns>True if 'roomI' contains a wumpus</returns>
        </member>
        <member name="M:FirstPersonWumpus.UI.UIControllerInterface.BatsHere(System.Int32)">
            <summary>
            Checks if there are bats in in 'roomI'
            </summary>
            <param name="roomI">The roomI to check for bats</param>
            <returns>True if 'roomI' contains bats</returns>
        </member>
        <member name="M:FirstPersonWumpus.UI.UIControllerInterface.PitHere(System.Int32)">
            <summary>
            Checks if there is a pit in 'roomI'
            </summary>
            <param name="roomI">The roomI to check for a pit</param>
            <returns>True if 'roomI' contains a pit</returns>
        </member>
        <member name="M:FirstPersonWumpus.UI.UIControllerInterface.Doors(System.Int32)">
            <summary>
            Gets an array of booleans for the doorways and walls of a roomI. 
            </summary>
            <param name="roomI">The number of the roomI</param>
            <returns>
            An array of 6 booleans where a true value is a doorway and a false value is a wall.
            The array should be in clockwise order, with the north doorway at index 0, and northwest doorway at index 5.
            </returns>
        </member>
        <member name="M:FirstPersonWumpus.UI.UIControllerInterface.GetHighScores">
            <summary>
            Gets an array of the top 10 highscores
            </summary>
            <returns>
            An array of string arrays, where the first item in the array is the label for each index, and each item after that is the information for a hightscore
            Ex: { 
                  { "Name", "Score", "Map", "Turns", "Gold", "Arrows" },
                  { "Bob", "300", "Map1", "30", "11", "2"},
                  { "Fred", "200", "Map3", "28", "7", "1"},
                  { "Sam", "100", "Map2", "33", "6", "2"} 
                }
            </returns>
        </member>
        <member name="M:FirstPersonWumpus.UI.UIControllerInterface.BuyArrow">
            <summary>
            Called after winning purchase arrow trivia.
            * Gain 1 arrow
            </summary>
        </member>
        <member name="M:FirstPersonWumpus.UI.UIControllerInterface.BuySecret">
            <summary>
            Called after winning purchase secret trivia.
            </summary>
            <returns>The message/secret that will be displayed to the player.</returns>
        </member>
        <member name="P:FirstPersonWumpus.UI.UIControllerInterface.Gold">
            <summary>
            Gets the amount of gold the player has
            </summary>
        </member>
        <member name="P:FirstPersonWumpus.UI.UIControllerInterface.Arrows">
            <summary>
            Gets the number of arrows the player has
            </summary>
        </member>
        <member name="P:FirstPersonWumpus.UI.UIControllerInterface.Turns">
            <summary>
            Gets the number of turns the player has taken
            </summary>
        </member>
        <member name="P:FirstPersonWumpus.UI.UIControllerInterface.Score">
            <summary>
            Gets the player's current score
            </summary>
        </member>
        <member name="P:FirstPersonWumpus.UI.UIControllerInterface.WumpusLocation">
            <summary>
            Gets the number of the roomI containing the wumpus.
            </summary>
        </member>
        <member name="P:FirstPersonWumpus.UI.UIControllerInterface.WumpusNearby">
            <summary>
            Returns true if the wumpus is in an adjacent roomI. (Adjacent to the player's current roomI)
            Returns false if the wumpus is not in an adjacent roomI.
            </summary>
        </member>
        <member name="P:FirstPersonWumpus.UI.UIControllerInterface.BatsNearby">
            <summary>
            Returns true if bats are in an adjacent roomI. (Adjacent to the player's current roomI)
            Returns false if bats are not in an adjacent roomI.
            </summary>
        </member>
        <member name="P:FirstPersonWumpus.UI.UIControllerInterface.PitNearby">
            <summary>
            Returns true if a pit is in an adjacent roomI. (Adjacent to the player's current roomI)
            Returns false if a pit is not in an adjacent roomI.
            </summary>
        </member>
        <member name="P:FirstPersonWumpus.UI.UIControllerInterface.FailedQuestions">
            <summary>
            Gets the number of trivia questions the player has answered incorrectly
            </summary>
        </member>
        <member name="P:FirstPersonWumpus.UI.UIControllerInterface.TotalSessionQuestions">
            <summary>
            Gets the number of total trivia questions that will be asked in the current trivia session
            </summary>
        </member>
        <member name="P:FirstPersonWumpus.UI.UIControllerInterface.TotalAnsweredQuestions">
            <summary>
            Gets the number of total trivia questions that have been answered in the current session
            </summary>
        </member>
        <member name="P:FirstPersonWumpus.UI.UIControllerInterface.WonTrivia">
            <summary>
            Return true if the number of correctly answered questions is greater than the number of incorrectly answered questions
            </summary>
        </member>
        <member name="T:FirstPersonWumpus.UI.WumpusGame">
            <summary>
            This is the main type for your game
            </summary>
        </member>
        <member name="M:FirstPersonWumpus.UI.WumpusGame.Initialize">
            <summary>
            Allows the game to perform any initialization it needs to before starting to run.
            This is where it can query for any required services and load any non-graphic
            related content.  Calling base.Initialize will enumerate through any components
            and initialize them as well.
            </summary>
        </member>
        <member name="M:FirstPersonWumpus.UI.WumpusGame.LoadContent">
            <summary>
            LoadContent will be called once per game and is the place to load
            all of your content.
            </summary>
        </member>
        <member name="M:FirstPersonWumpus.UI.WumpusGame.UnloadContent">
            <summary>
            UnloadContent will be called once per game and is the place to unload
            all content.
            </summary>
        </member>
        <member name="M:FirstPersonWumpus.UI.WumpusGame.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Allows the game to run logic such as updating the cave,
            checking for collisions, gathering input, and playing audio.
            </summary>
            <param name="gameTime">Provides a snapshot of timing values.</param>
        </member>
        <member name="M:FirstPersonWumpus.UI.WumpusGame.Draw(Microsoft.Xna.Framework.GameTime)">
            <summary>
            This is called when the game should draw itself.
            </summary>
            <param name="gameTime">Provides a snapshot of timing values.</param>
        </member>
    </members>
</doc>
